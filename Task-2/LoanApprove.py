# -*- coding: utf-8 -*-
"""LoanApproveal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l10lxQkjSozTXq6zEc1LRMqa_AaXahoC
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score

df = pd.read_csv('/content/loan_prediction.csv')

df.head()

df.tail()

df.describe().T

df.describe(include="all")

df.shape

df.columns

df.describe()

df.info()

df.duplicated().sum()

"""# Precessing the null **values**"""

df.isnull().sum()

# Fill the null values with mean
df['LoanAmount'] = df['LoanAmount'].fillna(df['LoanAmount'].mean())
df['Loan_Amount_Term'] = df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mean())
df['Credit_History'] = df['Credit_History'] .fillna(df['Credit_History'].mean())

# Fill naull values for Categorial
df['Gender']= df['Gender'].fillna(df['Gender'].mode()[0])
df['Married'] = df['Married'].fillna(df['Married'].mode()[0])
df['Dependents'] = df['Dependents'].fillna(df['Dependents'].mode()[0])
df['Self_Employed'] = df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])

df.isnull().sum()

"""# Explorarity Data Analysis

Categoeial Attributes visulazition


"""

sns.countplot(df['Gender'])

sns.countplot(df['Married'])

sns.countplot(df['Dependents'])

sns.countplot(df['Loan_Status'])

sns.countplot(df['Education'])

sns.countplot(df['Self_Employed'])

sns.countplot(df['Property_Area'])

"""Numarical attributes visulazition

# Create a New Attribute
"""

# Create Total Income
df['Total_Income'] = df['ApplicantIncome'] + df['CoapplicantIncome']
df.head()

"""# Log Transformation"""

df['ApplicantIncomeLog'] = np.log(df['ApplicantIncome'])
sns.distplot(df['ApplicantIncomeLog'])

df['LoanAmountLog'] = np.log(df['LoanAmount'])
sns.distplot(df['LoanAmountLog'])

df['Loan_Amount_Term_Log'] = np.log(df['Loan_Amount_Term'])
sns.distplot(df['Loan_Amount_Term_Log'])

sns.distplot(df['Credit_History'])

df['Total_Income_Log'] = np.log(df['Total_Income'])
sns.distplot(df['Total_Income_Log'])

"""# Confussion Matrix"""

numerical_df = df.select_dtypes(include=['number'])

corr = numerical_df.corr()
corr

# Select only numerical columns for correlation calculation
numerical_df = df.select_dtypes(include=['number'])

corr = numerical_df.corr()
plt.figure(figsize=(15, 10))
sns.heatmap(corr, annot=True, cmap="BuPu")

df.columns

# Drop unwanted columns
cols = ['ApplicantIncome','CoapplicantIncome','LoanAmount', 'Loan_Amount_Term','Total_Income','Loan_ID']
df = df.drop(columns = cols,axis = 1)
df.head()

"""# Label Encoding"""

cols = ['Gender','Married','Dependents','Education','Self_Employed','Property_Area','Loan_Status']
le = LabelEncoder()
for col in cols:
    df[col] = le.fit_transform(df[col])

df.head()

"""# Tarin Test Split"""

X = df.drop(columns = ['Loan_Status'], axis = 1)
y = df['Loan_Status']
X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 2529,test_size = 0.25)

"""# Model Training"""

def classify(model,X,y):
    X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 2529,test_size = 0.25)
    model.fit(X_train,y_train)
    print("Accuracy:",model.score(X_test,y_test)*100)
    score = cross_val_score(model,X,y,cv = 5)
    print("Cross Validation Score:",np.mean(score)*100)

model = LogisticRegression()
classify(model,X,y)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
classify(model,X,y)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
classify(model,X,y)

from sklearn.ensemble import ExtraTreesClassifier
model = ExtraTreesClassifier()
classify(model,X,y)

"""# Hyperparamater Tunning"""

model = RandomForestClassifier(n_estimators=100,min_samples_split=25,max_depth=7,max_features=1)
classify(model,X,y)

"""# Comfussion Matrix"""

model = RandomForestClassifier()
model.fit(X_train,y_train)

from sklearn.metrics import confusion_matrix
y_pred = model.predict(X_test)
cm = confusion_matrix(y_test,y_pred)
cm

sns.heatmap(cm,annot =True)

